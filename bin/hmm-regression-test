#!/usr/bin/env python

"""Do regression testing.
"""

from tempfile import mktemp
import os

import argparse
import numpy as np

from hmmus import demo
from hmmus import hmm

class TempFileManager:
    def __init__(self):
        self.redefine_filenames()
    def redefine_filenames(self):
        self.fn_distn = mktemp(prefix='distn.', suffix='.bin')
        self.fn_trans = mktemp(prefix='trans.', suffix='.bin')
        self.fn_likelihood = mktemp(prefix='likelihood.', suffix='.bin')
        self.fn_forward = mktemp(prefix='forward.', suffix='.bin')
        self.fn_scaling = mktemp(prefix='scaling.', suffix='.bin')
        self.fn_backward = mktemp(prefix='backward.', suffix='.bin')
        self.fn_posterior = mktemp(prefix='posterior.', suffix='.bin')
        self.input_filenames = set([
                self.fn_distn, self.fn_trans, self.fn_likelihood])
        self.output_filenames = set([
                self.fn_forward, self.fn_scaling, 
                self.fn_backward, self.fn_posterior])
        self.all_filenames = self.input_filenames | self.output_filenames
    def unlink_all(self):
        for fn in self.all_filenames:
            if os.path.isfile(fn):
                os.unlink(fn)
    def unlink_output(self):
        for fn in self.output_filenames:
            if os.path.isfile(fn):
                os.unlink(fn)

def check_shape(shape, arr, name):
    try:
        arr.reshape(shape)
    except ValueError, v:
        msg_a = '%s error: ' % name
        msg_b = 'the shape %s cannot be reshaped to %s' % (arr.shape, shape)
        raise Exception(msg_a + msg_b)

def test_fwdbwd_alldisk(d):
    """
    @param d: a demo instance
    """
    tfm = TempFileManager()
    # create the file of likelihoods
    with open(tfm.fn_likelihood, 'wb') as fout:
        d.get_likelihoods().tofile(fout)
    # run the hmm to create the output files
    hmm.fwdbwd_alldisk(
        d.get_distribution(), d.get_transitions(),
        tfm.fn_likelihood,
        tfm.fn_forward, tfm.fn_scaling, tfm.fn_backward, tfm.fn_posterior)
    # get the expected output
    ex_forward = d.get_expected_forward()
    ex_scaling = d.get_expected_scaling()
    ex_backward = d.get_expected_backward()
    ex_post = d.get_expected_posterior()
    # define the shapes
    sh_forward = ex_forward.shape
    sh_scaling = ex_scaling.shape
    sh_backward = ex_backward.shape
    sh_post = ex_post.shape
    # get the observed output
    ob_forward = np.fromfile(tfm.fn_forward, dtype='d')
    ob_scaling = np.fromfile(tfm.fn_scaling, dtype='d')
    ob_backward = np.fromfile(tfm.fn_backward, dtype='d')
    ob_post = np.fromfile(tfm.fn_posterior, dtype='d')
    # check shape compatibility
    check_shape(sh_forward, ob_forward, 'forward')
    check_shape(sh_scaling, ob_scaling, 'scaling')
    check_shape(sh_backward, ob_backward, 'backward')
    check_shape(sh_post, ob_post, 'posterior')
    # reshape the output arrays
    ob_forward = ob_forward.reshape(sh_forward)
    ob_scaling = ob_scaling.reshape(sh_scaling)
    ob_backward = ob_backward.reshape(sh_backward)
    ob_post = ob_post.reshape(sh_post)
    # compare expected and observed
    if not np.allclose(ex_forward, ob_forward):
        raise Exception('forward array mismatch')
    if not np.allclose(ex_scaling, ob_scaling):
        raise Exception('scaling array mismatch')
    if not np.allclose(ex_backward, ob_backward):
        raise Exception('backward array mismatch')
    if not np.allclose(ex_post, ob_post):
        raise Exception('posterior array mismatch')
    # unlink all files
    tfm.unlink_all()

def main(args):
    for d in [demo.SmithDemo(), demo.EddyDemo()]:
        test_fwdbwd_alldisk(d)
        #test_fwdbwd_somedisk(d)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    main(parser.parse_args())
